{
  "hash": "62c0cd29b0267bf38a4cbb781d8e7ce0",
  "result": {
    "markdown": "---\ntitle: \"Post Estimation Diagnostics\"\nauthor: \"Wilson Hendricks\"\ndate: \"2023-05-10\"\ncategories: [R,Regression , analysis]\nimage: \"image.jpg\"\n---\n\n\nHi Welcome to First Post\n\n## Data\n\nWe will use North Carololina birth records for the year 2004. We want to look at the relation between the habits and practices of expectant mothers and the birth of their children. The dataset is a random sample from the original dataset.\n\n**Predictors**\n\n-   **fage**: father's age in years.\n\n-   **mage**: mother's age in years.\n\n-   **mature**: maturity status of mother.\n\n-   **weeks**: length of pregnancy in weeks.\n\n-   **premie**: whether the birth was classified as premature (premie) or full-term.\n\n-   **visits**: number of hospital visits during pregnancy.\n\n-   **marital**: whether mother is married or not married at birth.\n\n-   **gained**: weight gained by mother during pregnancy in pounds.\n\n-   **gender**: gender of the baby, female or male.\n\n-   **habit**: status of the mother as a nonsmoker or a smoker.\n\n-   **whitemom**: whether mother is white or not white.\n\n# **Outcome variables**\n\n-   **weight**: weight of the baby at birth in pounds. (Regression problem)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(rpart)\n\n# data is stored in a csv file, the first row contains the variable names. \n# we call our data mydata\nmydata<-read.csv (\"nc1.csv\", header=TRUE)\n\nmydata<-mydata%>%\n  select(-lowbirthweight)\nstr(mydata)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t999 obs. of  12 variables:\n $ fage    : int  NA NA 19 21 NA NA 18 17 NA 20 ...\n $ mage    : int  13 14 15 15 15 15 15 15 16 16 ...\n $ mature  : chr  \"younger mom\" \"younger mom\" \"younger mom\" \"younger mom\" ...\n $ weeks   : int  39 42 37 41 39 38 37 35 38 37 ...\n $ premie  : chr  \"full term\" \"full term\" \"full term\" \"full term\" ...\n $ visits  : int  10 15 11 6 9 19 12 5 9 13 ...\n $ marital : chr  \"married\" \"married\" \"married\" \"married\" ...\n $ gained  : int  38 20 38 34 27 22 76 15 NA 52 ...\n $ weight  : num  7.63 7.88 6.63 8 6.38 5.38 8.44 4.69 8.81 6.94 ...\n $ gender  : chr  \"male\" \"male\" \"female\" \"male\" ...\n $ habit   : chr  \"nonsmoker\" \"nonsmoker\" \"nonsmoker\" \"nonsmoker\" ...\n $ whitemom: chr  \"not white\" \"not white\" \"white\" \"white\" ...\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Let's also take a look at the data\nprint(head(mydata))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  fage mage      mature weeks    premie visits marital gained weight gender\n1   NA   13 younger mom    39 full term     10 married     38   7.63   male\n2   NA   14 younger mom    42 full term     15 married     20   7.88   male\n3   19   15 younger mom    37 full term     11 married     38   6.63 female\n4   21   15 younger mom    41 full term      6 married     34   8.00   male\n5   NA   15 younger mom    39 full term      9 married     27   6.38 female\n6   NA   15 younger mom    38 full term     19 married     22   5.38   male\n      habit  whitemom\n1 nonsmoker not white\n2 nonsmoker not white\n3 nonsmoker     white\n4 nonsmoker     white\n5 nonsmoker not white\n6 nonsmoker not white\n```\n:::\n\n```{.r .cell-code}\n# check the summary statistics \n\nprint(summary(mydata))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      fage            mage          mature              weeks      \n Min.   :14.00   Min.   :13.00   Length:999         Min.   :20.00  \n 1st Qu.:25.00   1st Qu.:22.00   Class :character   1st Qu.:37.00  \n Median :30.00   Median :27.00   Mode  :character   Median :39.00  \n Mean   :30.26   Mean   :26.99                      Mean   :38.33  \n 3rd Qu.:35.00   3rd Qu.:32.00                      3rd Qu.:40.00  \n Max.   :55.00   Max.   :50.00                      Max.   :45.00  \n NA's   :170                                        NA's   :1      \n    premie              visits       marital              gained     \n Length:999         Min.   : 0.0   Length:999         Min.   : 0.00  \n Class :character   1st Qu.:10.0   Class :character   1st Qu.:20.00  \n Mode  :character   Median :12.0   Mode  :character   Median :30.00  \n                    Mean   :12.1                      Mean   :30.33  \n                    3rd Qu.:15.0                      3rd Qu.:38.00  \n                    Max.   :30.0                      Max.   :85.00  \n                    NA's   :8                         NA's   :26     \n     weight          gender             habit             whitemom        \n Min.   : 1.000   Length:999         Length:999         Length:999        \n 1st Qu.: 6.380   Class :character   Class :character   Class :character  \n Median : 7.310   Mode  :character   Mode  :character   Mode  :character  \n Mean   : 7.104                                                           \n 3rd Qu.: 8.060                                                           \n Max.   :11.750                                                           \n                                                                          \n```\n:::\n\n```{.r .cell-code}\n# Check for missing values in mydata\n\nsapply(mydata, function(x) sum(is.na(x)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    fage     mage   mature    weeks   premie   visits  marital   gained \n     170        0        0        1        1        8        0       26 \n  weight   gender    habit whitemom \n       0        0        0        2 \n```\n:::\n\n```{.r .cell-code}\n# Remove missing values\nmydata_clean <- na.omit(mydata)\n\n\n# Input missing values for continuous variables based on average\n\nmydata$fage[is.na(mydata$fage)] <- mean(mydata$fage, na.rm = TRUE)\nmydata$weeks[is.na(mydata$weeks)] <- mean(mydata$weeks, na.rm = TRUE)\nmydata$visits[is.na(mydata$visits)] <- mean(mydata$visits, na.rm = TRUE)\nmydata$gained[is.na(mydata$gained)] <- mean(mydata$gained, na.rm = TRUE)\n\n# Input missing values for categorical variable (whitemom)\nmode <- function(x) {\n  ux <- unique(x)\n  ux[which.max(tabulate(match(x, ux)))]\n}\n\nmydata$whitemom[is.na(mydata$whitemom)] <- mode(mydata$whitemom)\n\n#factor variables\n\nmydata$mature <- as.factor(mydata$mature)\nmydata$premie <- as.factor(mydata$premie)\nmydata$marital <- as.factor(mydata$marital)\nmydata$gender <- as.factor(mydata$gender)\nmydata$habit <- as.factor(mydata$habit)\nmydata$whitemom <- as.factor(mydata$whitemom)\n```\n:::\n\n\n# **Task 1:**\n\nBu using the **sample** function in R, split **mydata** into training and test sets by putting 70% of the data in training. Use set.seed(1234) when you do the split. Name the training set as **train_data** and the test set as **test_data**.\n\n```         \n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# split the sample\n# Using rsample package\n\n# Set the seed for reproducibility\nset.seed(1234)\n\n# Calculate the number of obs in the training set\ntrain_size <- floor(0.7 * nrow(mydata))\n\n# Index for the training set\ntrain_index <- sample(seq_len(nrow(mydata)), size = train_size)\n\n# Create the training and test sets\ntrain_data <- mydata[train_index, ]\ntest_data <- mydata[-train_index, ]\n```\n:::\n\n\n## Task 2:\n\nIn this task, you will be using the **`train_data`** dataset to run a linear regression that takes 'weight' as the dependent variable and all the other columns as the predictor.\n\n-   You will use the **`lm()`** function to estimate your linear model and name it as **`linearmodel`**.\n\n-   Use the **`predict()`** function to predict the 'weight' variable in the **`test_data`** dataset using **`linearmodel`**.\n\n-   Store the resulting predictions in a new object called **`predicted_weights`**.\n\n-   Calculate the mean squared prediction error in the **`test_data`** dataset by comparing the predicted 'weight' values with the actual 'weight' values. Store the resulting value in an object called **`MSPE_linear`**.\n\n-   Print the value of **`MSPE_linear`** to the console using the **`print()`** function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fit a linear regression model using train_data\nlinearmodel <- lm(weight ~ fage + mage + mature + weeks + premie + visits + marital + gained + gender + habit + whitemom, data = train_data)\n\n#  Predict the 'weight' variable in the test_data dataset using linearmodel.\npredicted_weights <- predict(linearmodel, newdata = test_data)\n\n# Calculate MSPE in the test_data by comparing the predicted 'weight' values with the actual 'weight' values\nMSPE_linear <- mean((test_data$weight - predicted_weights)^2)\n\n# Print the value of MSPE_linear\nprint(MSPE_linear)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.073253\n```\n:::\n:::\n\n\n## Task 3:\n\n-   Use the generalized additive model (GAM) function in the **`mgcv`** package to complete the same task. In other words, fit a GAM on the `train_data` using the **`gam()`** function. Use the **`s()`** function for each predictor. By doing so, you specify that each predictor variable is modeled using a smoothing spline. Save your R object as `gam_model`\n\n-   Use the **`predict()`** function to predict the 'weight' variable in the **`test_data`** dataset using **`gam_model`**. Store the resulting predictions in a new object called **`predicted_weights`**.\n\n-   Calculate the mean squared prediction error in the **`test_data`** dataset by comparing the predicted 'weight' values with the actual 'weight' values. Store the resulting value in an object called **`MSPE_gam`**.\n\nPrint the value of **`MSPE_gam`** to the console using the **`print()`** function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Install and load the mgcv package\n\nlibrary(mgcv)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: nlme\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'nlme'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:dplyr':\n\n    collapse\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThis is mgcv 1.8-42. For overview type 'help(\"mgcv-package\")'.\n```\n:::\n\n```{.r .cell-code}\n# Fit a GAM using train_data\ngam_model <- gam(weight ~ s(fage) + s(mage) + factor(mature) + s(weeks) + factor(premie) + s(visits) + factor(marital) + s(gained) + factor(gender) + factor(habit) + factor(whitemom), data = train_data)\n\n# Predict the 'weight' variable in the test_data dataset using gam_model\npredicted_weights <- predict(gam_model, newdata = test_data)\n\n# Calculate the mean squared prediction error (MSPE)\nMSPE_gam <- mean((test_data$weight - predicted_weights)^2)\n\n\n# Print the MSPE values for both models\nprint(MSPE_linear)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.073253\n```\n:::\n\n```{.r .cell-code}\nprint(MSPE_gam)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.047226\n```\n:::\n\n```{.r .cell-code}\n#The MSPE_gam model performs better\n```\n:::\n\n\n## Task 4\n\n-   Compare the mean squared prediction error obtained from the linear regression model (**`linearmodel`**) in Task 2 and the generalized additive model (**`gam_model`**) in the previous task. You will use the **`MSPE_linear`** and **`MSPE_gam`** values to determine which model performs better in predicting the 'weight' variable in the **`test_data`** dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Print the MSPE values for both models\nprint(MSPE_linear)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.073253\n```\n:::\n\n```{.r .cell-code}\n#The MSPE_gam model performs better\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}